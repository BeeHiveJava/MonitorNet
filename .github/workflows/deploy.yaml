---
name: deploy

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
    inputs:
      environment:
        description: Deployment Environment
        required: true
        type: choice
        options: [Development, Production]
        default: Development

jobs:
  infrastructure:
    runs-on: ubuntu-latest

    environment: ${{ inputs.environment }}
    concurrency: ${{ inputs.environment }}

    outputs:
      apim_name: ${{ steps.deploy.outputs.apim_name }}
      apim_uri: ${{ steps.deploy.outputs.apim_uri }}
      backend_app_name: ${{ steps.deploy.outputs.backend_app_name }}
      backend_app_uri: ${{ steps.deploy.outputs.backend_app_uri }}
      frontend_app_name: ${{ steps.deploy.outputs.frontend_app_name }}
      frontend_app_uri: ${{ steps.deploy.outputs.frontend_app_uri }}

    steps:
    - name: Checkout code
      uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4

    - name: Azure login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Bicep deploy
      uses: azure/arm-deploy@v2
      with:
        subscriptionId: ${{ vars.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ vars.AZURE_RESOURCEGROUP }}
        template: MonitorNet.Infrastructure/main.bicep
        parameters: >-
          fncDevicesToken=${{ secrets.BALENA_TOKEN }}
          apimPublisherName=${{ secrets.APIM_PUBLISHER_NAME }}
          apimPublisherEmail=${{ secrets.APIM_PUBLISHER_EMAIL }}
      id: deploy

  backend:
    runs-on: ubuntu-latest
    needs: infrastructure

    environment: ${{ inputs.environment }}
    concurrency: ${{ inputs.environment }}-backend

    env:
      BACKEND_DIRECTORY: MonitorNet.Functions.Api

    steps:
    - name: Checkout code
      uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4

    - name: Dotnet setup
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Dotnet restore
      run: dotnet restore
      working-directory: ${{ env.BACKEND_DIRECTORY }}

    - name: Dotnet publish
      run: dotnet publish --output ./output
      working-directory: ${{ env.BACKEND_DIRECTORY }}

    - name: Azure login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure deploy
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ needs.infrastructure.outputs.backend_app_name }}
        package: ${{ env.BACKEND_DIRECTORY }}/output

    - name: Azure apim import
      uses: azure/cli@v2
      with:
        inlineScript: >-
          az apim api import
          --api-id "api"
          --path "api"
          --display-name "api"
          --description "Imported from: ${{ needs.infrastructure.outputs.backend_app_uri }}/api/openapi/1.0"
          --resource-group "${{ vars.AZURE_RESOURCEGROUP }}"
          --service-name "${{ needs.infrastructure.outputs.apim_name }}"
          --service-url "${{ needs.infrastructure.outputs.backend_app_uri }}/api"
          --specification-url "${{ needs.infrastructure.outputs.backend_app_uri }}/api/openapi/1.0"
          --specification-format "OpenApiJson"

  frontend:
    runs-on: ubuntu-latest
    needs: infrastructure

    environment: ${{ inputs.environment }}
    concurrency: ${{ inputs.environment }}-frontend

    env:
      FRONTEND_DIRECTORY: MonitorNet.Frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4

    - name: Node setup
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Node install
      run: npm ci
      working-directory: ${{ env.FRONTEND_DIRECTORY }}

    - name: Node build
      run: npm run build
      working-directory: ${{ env.FRONTEND_DIRECTORY }}
      env:
        VITE_API_BASE_URI: ${{ needs.infrastructure.outputs.apim_uri }}

    - name: Azure login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure Static Web App Management Token
      uses: azure/cli@v2
      with:
        inlineScript: |-
          TOKEN=$(
            az staticwebapp secrets list \
            --name "${{ needs.infrastructure.outputs.frontend_app_name }}" \
            --query "properties.apiKey" \
            --output "tsv"
          )
          echo "SWA_TOKEN=$TOKEN" >> "$GITHUB_ENV"

    - name: Azure deploy
      uses: Azure/static-web-apps-deploy@4d27395796ac319302594769cfe812bd207490b1
      with:
        action: upload
        azure_static_web_apps_api_token: ${{ env.SWA_TOKEN }}
        app_location: ${{ env.FRONTEND_DIRECTORY }}/dist
        skip_app_build: true
        skip_api_build: true
